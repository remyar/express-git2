// Generated by CoffeeScript 1.12.7
(function() {
  var BadRequestError, ConflictError, HttpError, NonHttpError, NotFoundError, NotModified, ServerError, UnauthorizedError, UnsupportedMediaTypeError, httpErrorHandler,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  HttpError = (function(superClass) {
    extend(HttpError, superClass);

    HttpError.prototype.name = "HttpError";

    function HttpError(message) {
      this.message = message;
      if (this.status >= 500) {
        Error.captureStackTrace(this);
      }
    }

    HttpError.prototype.toJSON = function() {
      return {
        message: this.message,
        statusCode: this.status,
        error: this.name
      };
    };

    return HttpError;

  })(Error);

  ServerError = (function(superClass) {
    extend(ServerError, superClass);

    function ServerError() {
      return ServerError.__super__.constructor.apply(this, arguments);
    }

    ServerError.prototype.status = 500;

    ServerError.prototype.name = "ServerError";

    ServerError.prototype.message = "Internal Server Error";

    return ServerError;

  })(HttpError);

  NotFoundError = (function(superClass) {
    extend(NotFoundError, superClass);

    function NotFoundError() {
      return NotFoundError.__super__.constructor.apply(this, arguments);
    }

    NotFoundError.prototype.status = 404;

    NotFoundError.prototype.name = "NotFoundError";

    NotFoundError.prototype.message = "Not Found";

    return NotFoundError;

  })(HttpError);

  BadRequestError = (function(superClass) {
    extend(BadRequestError, superClass);

    function BadRequestError() {
      return BadRequestError.__super__.constructor.apply(this, arguments);
    }

    BadRequestError.prototype.status = 400;

    BadRequestError.prototype.name = "BadRequestError";

    BadRequestError.prototype.message = "Bad Request Error";

    return BadRequestError;

  })(HttpError);

  UnauthorizedError = (function(superClass) {
    extend(UnauthorizedError, superClass);

    function UnauthorizedError() {
      return UnauthorizedError.__super__.constructor.apply(this, arguments);
    }

    UnauthorizedError.prototype.status = 401;

    UnauthorizedError.prototype.name = "UnauthorizedError";

    UnauthorizedError.prototype.message = "Not Authorized";

    return UnauthorizedError;

  })(HttpError);

  UnsupportedMediaTypeError = (function(superClass) {
    extend(UnsupportedMediaTypeError, superClass);

    function UnsupportedMediaTypeError() {
      return UnsupportedMediaTypeError.__super__.constructor.apply(this, arguments);
    }

    UnsupportedMediaTypeError.prototype.status = 415;

    UnsupportedMediaTypeError.prototype.name = "UnsupportedMediaTypeError";

    UnsupportedMediaTypeError.prototype.message = "Unsupported Media Type";

    return UnsupportedMediaTypeError;

  })(HttpError);

  NotModified = (function(superClass) {
    extend(NotModified, superClass);

    function NotModified() {
      return NotModified.__super__.constructor.apply(this, arguments);
    }

    NotModified.prototype.status = 304;

    NotModified.prototype.name = "NotModified";

    NotModified.prototype.message = null;

    return NotModified;

  })(HttpError);

  ConflictError = (function(superClass) {
    extend(ConflictError, superClass);

    function ConflictError() {
      return ConflictError.__super__.constructor.apply(this, arguments);
    }

    ConflictError.prototype.status = 409;

    ConflictError.prototype.name = "Conflict";

    ConflictError.prototype.message = "Conflict";

    return ConflictError;

  })(HttpError);

  httpErrorHandler = function(err, req, res, next) {
    var status;
    status = parseInt(err.status || err.statusCode);
    if (status && !res.headersSent) {
      res.status(status);
      if (status < 400) {
        res.end();
      } else if (req.accepts("json")) {
        res.json(err);
      } else if (res.message) {
        res.send(res.message);
        res.end();
      } else {
        res.end();
      }
      return next();
    } else {
      return next(err);
    }
  };

  NonHttpError = function(err) {
    return !err.status;
  };

  module.exports = {
    HttpError: HttpError,
    NotModified: NotModified,
    ServerError: ServerError,
    BadRequestError: BadRequestError,
    UnauthorizedError: UnauthorizedError,
    NotFoundError: NotFoundError,
    NonHttpError: NonHttpError,
    httpErrorHandler: httpErrorHandler,
    UnsupportedMediaTypeError: UnsupportedMediaTypeError,
    ConflictError: ConflictError
  };

}).call(this);


