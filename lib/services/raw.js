// Generated by CoffeeScript 1.12.7
(function() {
  var assign, httpify, mime, ref;

  mime = require("mime-types");

  ref = require("../helpers"), httpify = ref.httpify, assign = ref.assign;

  module.exports = function(app, options) {
    var BadRequestError, NotFoundError, NotModified, ref1;
    ref1 = app.errors, NotModified = ref1.NotModified, NotFoundError = ref1.NotFoundError, BadRequestError = ref1.BadRequestError;
    app.get("/:git_repo(.*).git/raw/:oid([a-zA-Z0-9]{40})", app.authorize("raw"), function(req, res, next) {
      var git_repo, oid, ref2, repositories;
      ref2 = req.params, git_repo = ref2.git_repo, oid = ref2.oid;
      if (oid === req.headers['if-none-match']) {
        return next(new NotModified);
      }
      repositories = req.git.repositories;
      return repositories.blob(git_repo, oid).then(function(arg) {
        var blob;
        blob = arg[0];
        if (blob == null) {
          throw new NotFoundError("Blob not found");
        }
        res.set(assign(app.cacheHeaders(blob, {
          "Content-Type": "application/octet-stream",
          "Content-Length": blob.rawsize()
        })));
        res.end(blob.content());
        return next();
      })["catch"](next);
    });
    return app.get("/:git_repo(.*).git/:refname(.*)?/raw/:path(.*)", app.authorize("raw"), function(req, res, next) {
      var disposable, etag, git_repo, path, ref2, ref3, refname, repositories;
      ref2 = req.params, git_repo = ref2.git_repo, refname = ref2.refname, path = ref2.path;
      if (!path) {
        return next(new BadRequestError("Invalid path"));
      }
      etag = req.headers['if-none-match'];
      ref3 = req.git, repositories = ref3.repositories, disposable = ref3.disposable;
      return repositories.entry(git_repo, refname, path).then(function(arg) {
        var entry;
        entry = arg[0];
        if (entry == null) {
          throw new NotFoundError("Entry not found");
        }
        if (!entry.isBlob()) {
          throw new BadRequestError("Entry is not a blob");
        }
        if (etag === ("" + (entry.sha()))) {
          throw new NotModified;
        }
        return entry.getBlob();
      }).then(disposable)["catch"](httpify(404)).then(function(blob) {
        res.set(assign(app.cacheHeaders(blob), {
          "Content-Type": mime.lookup(path) || "application/octet-stream",
          "Content-Length": blob.rawsize()
        }));
        res.end(blob.content());
        return next();
      })["catch"](next);
    });
  };

}).call(this);
