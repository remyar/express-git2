// Generated by CoffeeScript 1.12.7
(function() {
  var httpify;

  httpify = require("../helpers").httpify;

  module.exports = function(app, options) {
    var BLOB, BadRequestError, COMMIT, NotModified, TAG, TREE, git, ref, ref1;
    git = app.git;
    ref = git.Object.TYPE, BLOB = ref.BLOB, TREE = ref.TREE, COMMIT = ref.COMMIT, TAG = ref.TAG;
    ref1 = app.errors, BadRequestError = ref1.BadRequestError, NotModified = ref1.NotModified;
    return app.get("/:git_repo(.*).git/object/:oid([a-zA-Z0-9]{40})", app.authorize("browse"), function(req, res, next) {
      var disposable, git_repo, oid, ref2, ref3, repositories;
      ref2 = req.params, git_repo = ref2.git_repo, oid = ref2.oid;
      ref3 = req.git, repositories = ref3.repositories, disposable = ref3.disposable;
      if (oid === req.headers["if-none-match"]) {
        return next(new NotModified);
      }
      return repositories.open(git_repo).then(function(repo) {
        return git.Object.lookup(repo, oid);
      }).then(disposable).then(function(object) {
        switch (object.type()) {
          case BLOB:
            return git.Blob.lookup(repo, oid);
          case TREE:
            return git.Tree.lookup(repo, oid);
          case COMMIT:
            return git.Commit.lookup(repo, oid);
          case TAG:
            return git.Tag.lookup(repo, oid);
          default:
            throw new BadRequestError("Invalid object type");
        }
      }).then(disposable)["catch"](httpify(404)).then(function(object) {
        res.set(app.cacheHeaders(object));
        res.json(object);
        return next();
      })["catch"](next);
    });
  };

}).call(this);


