// Generated by CoffeeScript 1.12.7
(function() {
  var GitUpdateRequest, PACK, Transform, ZERO_PKT_LINE,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Transform = require("stream").Transform;

  ZERO_PKT_LINE = new Buffer("0000");

  PACK = new Buffer("PACK");

  GitUpdateRequest = (function(superClass) {
    extend(GitUpdateRequest, superClass);

    function GitUpdateRequest() {
      GitUpdateRequest.__super__.constructor.apply(this, arguments);
      this.pos = 0;
      this.buffer = null;
      this.changes = [];
      this.capabilities = null;
    }

    GitUpdateRequest.prototype._transform = function(chunk, encoding, callback) {
      var after, before, buffer, end, head, line, offset, ref, ref1, ref2;
      if (this.pos < 0) {
        return callback(null, chunk);
      }
      buffer = this.buffer != null ? Buffer.concat([this.buffer, chunk]) : chunk;
      while (true) {
        end = this.pos + 4;
        if (buffer.length < end) {
          this.buffer = buffer;
          break;
        }
        head = buffer.slice(this.pos, end);
        if (head.equals(ZERO_PKT_LINE)) {
          this.emit("changes", this.changes, this.capabilities);
          this.push(buffer.slice(end));
          this.buffer = null;
          this.pos = -1;
          break;
        }
        offset = parseInt("" + head, 16);
        if (offset > 0) {
          this.pos += offset;
          line = buffer.toString("utf8", end, this.pos);
          if (this.capabilities == null) {
            ref1 = line.split("\0"), line = ref1[0], this.capabilities = ref1[1];
          }
          ref2 = line.split(" "), before = ref2[0], after = ref2[1], ref = ref2[2];
          this.changes.push({
            before: before,
            after: after,
            ref: ref
          });
        } else {
          this.emit("error", new Error("Invalid pkt line"));
          this.push(null);
          break;
        }
      }
      return callback();
    };

    return GitUpdateRequest;

  })(Transform);

  module.exports = {
    PACK: PACK,
    ZERO_PKT_LINE: ZERO_PKT_LINE,
    GitUpdateRequest: GitUpdateRequest
  };

}).call(this);

